c----------------------------------------------------------------------c
c----------------------------------------------------------------------c   
c----------------------------------------------------------------------c
c              current status of blassm.f95                            c
c                                                                      c
c----------------------------------------------------------------------c
c                          S P A R S K I T                             c
c----------------------------------------------------------------------c
c        BASIC LINEAR ALGEBRA FOR SPARSE MATRICES. BLASSM MODULE       c
c----------------------------------------------------------------------c
c amub   :   computes     C = A*B                                      c
c aplb   :   computes     C = A+B                                      c
c aplsb  :   computes     C = A + s B                                  c
c apmbt  :   Computes     C = A +/- transp(B)                          c
c aplsbt :   Computes     C = A + s * transp(B)                        c
c diamua :   Computes     C = Diag * A                                 c
c amudia :   Computes     C = A* Diag                                  c
c apldia :   Computes     C = A + Diag.                                c
c aplsca :   Computes     A:= A + s I    (s = scalar)                  c 
c----------------------------------------------------------------------c 
c----------------------------------------------------------------------c
c                                                                      c
c              current status of matvec.f95                            c
c                                                                      c
c----------------------------------------------------------------------c
c                          S P A R S K I T                             c
c----------------------------------------------------------------------c
c          BASIC MATRIX-VECTOR OPERATIONS - MATVEC MODULE              c
c         Matrix-vector Mulitiplications and Triang. Solves            c
c----------------------------------------------------------------------c
c contents:
c----------                                                            c
c 1) Matrix-vector products:                                           c
c---------------------------                                           c
c amux  : A times a vector. Compressed Sparse Row (CSR) format.        c
c amuxms: A times a vector. Modified Compress Sparse Row format.       c
c atmux : Transp(A) times a vector. CSR format.                        c
c amuxe : A times a vector. Ellpack/Itpack (ELL) format.               c
c amuxd : A times a vector. Diagonal (DIA) format.                     c
c amuxj : A times a vector. Jagged Diagonal (JAD) format.              c
c vbrmv : Sparse matrix-full vector product, in VBR format             c
c                                                                      c
c 2) Triangular system solutions:                                      c
c-------------------------------                                       c
c lsol  : Unit Lower Triang. solve. Compressed Sparse Row (CSR) format.c
c ldsol : Lower Triang. solve.  Modified Sparse Row (MSR) format.      c
c lsolc : Unit Lower Triang. solve. Comp. Sparse Column (CSC) format.  c
c ldsolc: Lower Triang. solve. Modified Sparse Column (MSC) format.    c
c ldsoll: Lower Triang. solve with level scheduling. MSR format.       c
c usol  : Unit Upper Triang. solve. Compressed Sparse Row (CSR) format.c
c udsol : Upper Triang. solve.  Modified Sparse Row (MSR) format.      c
c usolc : Unit Upper Triang. solve. Comp. Sparse Column (CSC) format.  c
c udsolc: Upper Triang. solve.  Modified Sparse Column (MSC) format.   c
c----------------------------------------------------------------------c

c======================================================================c
c                  formats.f95:        				                   c
c======================================================================c 
c                                                                      c
c----------------------------------------------------------------------c
c                          S P A R S K I T                             c
c----------------------------------------------------------------------c
c                    FORMAT CONVERSION MODULE                          c
c----------------------------------------------------------------------c
c contents:                                                            c
c----------                                                            c
c csrdns  : converts a row-stored sparse matrix into the dense format. c
c dnscsr  : converts a dense matrix to a sparse storage format.        c
c coocsr  : converts coordinate to  to csr format                      c
c coicsr  : in-place conversion of coordinate to csr format            c
c csrcoo  : converts compressed sparse row to coordinate.              c
c csrssr  : converts compressed sparse row to symmetric sparse row     c
c ssrcsr  : converts symmetric sparse row to compressed sparse row     c
c csrell  : converts compressed sparse row to ellpack format           c
c ellcsr  : converts ellpack format to compressed sparse row format    c
c csrmsr  : converts compressed sparse row format to modified sparse   c
c           row format                                                 c
c msrcsr  : converts modified sparse row format to compressed sparse   c
c           row format.                                                c
c csrcsc  : converts compressed sparse row format to compressed sparse c
c           column format (transposition)                              c
c csrlnk  : converts compressed sparse row to linked list format       c
c lnkcsr  : converts linked list format to compressed sparse row fmt   c
c csrdia  : converts a compressed sparse row format into a diagonal    c
c           format.                                                    c
c diacsr  : converts a diagonal format into a compressed sparse row    c
c           format.                                                    c
c bsrcsr  : converts a block-row sparse format into a compressed       c
c           sparse row format.                                         c
c csrbsr  : converts a compressed sparse row format into a block-row   c
c           sparse format.                                             c
c csrbnd  : converts a compressed sparse row format into a banded      c
c           format (linpack style).                                    c
c bndcsr  : converts a banded format (linpack style) into a compressed c
c           sparse row storage.                                        c
c csrssk  : converts the compressed sparse row format to the symmetric c
c           skyline format                                             c
c sskssr  : converts symmetric skyline format to symmetric  sparse row c
c           format.                                                    c
c csrjad  : converts the csr format into the jagged diagonal format    c
c jadcsr  : converts the jagged-diagonal format into the csr format    c
c csruss  : Compressed Sparse Row to Unsymmetric Sparse Skyline format c
c usscsr  : Unsymmetric Sparse Skyline format to Compressed Sparse Row c
c csrsss  : Compressed Sparse Row to Symmetric Sparse Skyline format   c
c ssscsr  : Symmetric Sparse Skyline format to Compressed Sparse Row   c
c csrvbr  : Converts compressed sparse row to var block row format     c
c vbrcsr  : Converts var block row to compressed sparse row format     c
c--------- miscalleneous additions not involving the csr format--------c
c cooell  : converts coordinate to Ellpack/Itpack format               c
c dcsort  : sorting routine used by crsjad                             c
c csorted :  Checks if matrix in CSR format is sorted by columns       c
c----------------------------------------------------------------------c
c======================================================================c
c                        unary.f95:  				                   c  
c======================================================================c
c                                                                      c
c----------------------------------------------------------------------c
c                          S P A R S K I T                             c
c----------------------------------------------------------------------c
c                     UNARY SUBROUTINES MODULE                         c
c----------------------------------------------------------------------c
c contents:                                                            c
c----------                                                            c
c submat : extracts a submatrix from a sparse matrix.                  c
c filter : filters elements from a matrix according to their magnitude.c
c filterm: same as above, but for the MSR format                       c
c csort  : sorts the elements in increasing order of columns           c
c transp : in-place transposition routine (see also csrcsc in formats) c
c copmat : copy of a matrix into another matrix (both stored csr)      c
c getelm : returns a(i,j) for any (i,j) from a CSR-stored matrix.      c
c getdia : extracts a specified diagonal from a matrix.                c
c getl   : extracts lower triangular part                              c
c getu   : extracts upper triangular part                              c
c levels : gets the level scheduling structure for lower triangular    c
c          matrices.                                                   c
c amask  : extracts     C = A mask M                                   c
c rperm  : permutes the rows of a matrix (B = P A)                     c
c cperm  : permutes the columns of a matrix (B = A Q)                  c
c dperm  : permutes both the rows and columns of a matrix (B = P A Q ) c
c dmperm : symmetric permutation of row and column (B = P A P')        c
c dvperm : permutes a real vector (in-place)                           c
c ivperm : permutes an integer vector (in-place)                       c
c retmx  : returns the max absolute value in each row of the matrix    c
c diapos : returns the positions of the diagonal elements in A.        c
c extbdg : extracts the main diagonal blocks of a matrix.              c
c getbwd : returns the bandwidth information on a matrix.              c
c blkfnd : finds the block-size of a matrix.                           c
c blkchk : checks whether a given integer is the block size of A.      c
c infdia : obtains information on the diagonals of A.                  c
c amubdg : gets number of nonzeros in each row of A*B (as well as NNZ) c 
c aplbdg : gets number of nonzeros in each row of A+B (as well as NNZ) c
c rnrms  : computes the norms of the rows of A                         c
c cnrms  : computes the norms of the columns of A                      c
c rscal  : scales the rows of a matrix by their norms.                 c
c cscal  : scales the columns of a matrix by their norms.              c
c addblk : Adds a matrix B into a block of A.                          c
c get1up : Collects the first elements of each row of the upper        c
c          triangular portion of the matrix.                           c
c xtrows : extracts given rows from a matrix in CSR format.            c
c csrkvstr:  Finds block row partitioning of matrix in CSR format      c
c csrkvstc:  Finds block column partitioning of matrix in CSR format   c
c kvstmerge: Merges block partitionings, for conformal row/col pattern c
c----------------------------------------------------------------------c

c------------------------------------------------------------------------------c
c                          INFO MODULE                                         c
c------------------------------------------------------------------------------c
c  The INFO module provides some elementary information on a sparse            c
c  matrix. Geared towards a matrix in Harwell-Boeing format.                   c
c  There is also a short main program that will read a Harwell-Boeing          c
c  matrix and produce the information on the standard output. See below.       c
c                                                                              c
c------------------------------------------------------------------------------c
c  infofun.f95 contains subroutines:                                           c
c------------------------------------------------------------------------------c
c    bandwidth :  computes the lower, upper, maximum, and average bandwidths.  c
c    nonz      :  computes maximum numbers of nonzero elements per column/row, c
c                minimum numbers of nonzero elements per column/row, and       c
c                numbers of zero columns/rows.                                 c
c    diag_domi : computes the percentage of weakly diagonally dominant         c
c                rows/columns.                                                 c
c    frobnorm  : computes the Frobenius norm of A.                             c
c    ansym     : computes the Frobenius norm of the symmetric and non-symmetricc
c                parts of A, computes number of matching elements in symmetry  c
c                and relative symmetry match.                                  c
c    distaij   : computes the average distance of a(i,j) from diag and standardc
c                deviation  for this average.                                  c
c    skyline   : computes the number of nonzeros in the skyline storage.       c
c    distdiag  : computes the numbers of elements in each diagonal.            c
c    bandpart  : computes the bandwidth of the banded matrix, which contains   c
c                'nper' percent of the original matrix.                        c
c    n_imp_diag: computes the most important diagonals.                        c
c    nonz_lud  : computes the number of nonzero elements in strict lower part, c
c                strict upper part, and main diagonal.                         c
c    avnz_col  : computes average number of nonzero elements/column and std    c
c                deviation for this average.                                   c
c    vbrinfo   : Print info on matrix in variable block row format             c
c------------------------------------------------------------------------------c

c----------------------------------------------------------------------c
C                        INPUT-OUTPUT MODULE  (inout.f95)              c
c----------------------------------------------------------------------c
c contents:                                                            c
c----------                                                            c
c  readmt : reads matrices in the Boeing/Harwell format.               c
c  prtmt  : prints matrices in the Boeing/Harwell format.              c
c  dump   : outputs matrix rows in a simple format (debugging purposes)c 
c  pspltm : generates a post-script plot of the non-zero pattern of A  c
c  pltmt  : produces a 'pic' file for plotting a sparse matrix         c
c  smms   : write the matrx in a format used in SMMS package           c
c  readsm : reads matrics in coordinate format (as in SMMS package)    c
c  readsk : reads matrices in CSR format (simplified H/B formate).     c
c  skit   : writes matrics to a file, format same as above.            c
c  prtunf : writes matrics (in CSR format) unformatted                 c
c  readunf: reads unformatted data of matrics (in CSR format)          c
c----------------------------------------------------------------------c

iters.f95 : This file currently has several basic iterative linear system
           solvers. They are:
           CG       -- Conjugate Gradient Method
           CGNR     -- Conjugate Gradient Method on Normal Residual equation
           BCG      -- Bi-Conjugate Gradient Method
           BCGSTAB  -- BCG stablized
           TFQMR    -- Transpose-Free Quasi-Minimum Residual method
           GMRES    -- Generalized Minimum RESidual method
           FGMRES   -- Flexible version of Generalized Minimum RESidual method
           DQGMRES  -- Direct verions of Quasi Generalized Minimum Residual 
                       method
           DBCG     -- BCG with partial pivoting

 Preconditioners
 ---------------
	
 ilut.f95 :  ILUT + GMRES: a combination of a robust preconditioner
	   using dual thresholding for dropping strategy and
	   the GMRES algorithm. ILU0 and MILU0 are also provided
	   for comparison purposes.
	   large number of updates on Feb 10, 1992 Y.S. 
	   ILUTP, or ILUT with partial pivoting is also provided.

genmat.f95 ---- the matrix generation routines.

meshes.f95   == set of sample meshes defined as inout to the driver

dsepart.f95 -- level set based algorithms

   dblstr   : doubled stripe partitioner 
   rdis     : recursive dissection partitioner
   dse2way  : distributed site expansion usuing sites from dblstr 
   dse      : distributed site expansion usuing sites from rdis
   BFS      : Breadth-First search traversal algorithm 
   add_lvst : routine to add a level -- used by BFS 
   stripes  : finds the level set structure
   stripes0 : finds a trivial one-way partitioning from level-sets 
   perphn   : finds a pseudo-peripheral node and performs a BFS from it.
   mapper4  : routine used by dse and dse2way to do center expansion
   get_domns: routine to find subdomaine from linked lists found by 
              mapper4. 
   add_lk   : routine to add entry to linked list -- used by mapper4. 
   find_ctr : routine to locate an approximate center of a subgraph. 
   rversp   : routine to reverse a given permutation (e.g., for RCMK)
   maskdeg  : integer function to compute the `masked' of a node

color.f95  --  algorithms for independent set ordering and multicolor
            orderings

   multic  : greedy algorithm for multicoloring 
   indset0 : greedy algorithm for independent set ordering
   indset1 : independent set ordering using minimal degree traversal
   indset2 : independent set ordering with local minimization 
   indset3 : independent set ordering by vertex cover algorithm

ccn.f95 -- code for strongly connected components

    blccnx : Driver routine to reduce the structure of a  matrix 
             to its strongly connected components.
    cconex : Main routine to compute the strongly connected components
             of a (block diagonal) matrix.
    anccnx : We put in ICCNEX the vertices marked in the component MCCNEX.
    newcnx : We put in ICCNEX the vertices marked in the component
             MCCNEX. We modify also the vector KPW.
    blccn1 : Parallel computation of the connected components of a
             matrix. The parallel loop is performed only if the matrix
             has a block diagonal structure.
    icopy  : We copy an integer vector into anothoer.
    compos : We calculate the composition between two permutation
             vectors.
    invlpw : We calculate the inverse of a permutation vector.
    numini : We initialize a vector to the identity.
    tbzero : We initialize to ZERO an integer vector.
    iplusa : Given two integers IALPHA and IBETA, for an integer vector 
             IA we calculate IA(i) = ialpha + ibeta * ia(i)